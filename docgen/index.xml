<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docgens on Zulu documentation</title><link>https://zulucmd.github.io/zulu/docgen/</link><description>Recent content in Docgens on Zulu documentation</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><atom:link href="https://zulucmd.github.io/zulu/docgen/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://zulucmd.github.io/zulu/docgen/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zulucmd.github.io/zulu/docgen/docs/</guid><description> Documentation generation Zulu supports generating different types of documentation. This section explain how to generate man pages, markdown, and others.
Options DisableAutoGenTag. You may set cmd.DisableAutoGenTag = true to entirely remove the auto generated string &amp;ldquo;Auto generated by zulucmd/zulu&amp;hellip;&amp;rdquo; from any documentation source.</description></item><item><title/><link>https://zulucmd.github.io/zulu/docgen/man/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zulucmd.github.io/zulu/docgen/man/</guid><description>Man Pages Generating man pages from a zulu command is incredibly easy. An example is as follows:
package main import ( &amp;#34;log&amp;#34; &amp;#34;github.com/zulucmd/zulu/v2&amp;#34; &amp;#34;github.com/zulucmd/zulu/v2/doc&amp;#34; ) func main() { cmd := &amp;amp;zulu.Command{ Use: &amp;#34;test&amp;#34;, Short: &amp;#34;my test program&amp;#34;, } header := &amp;amp;doc.GenManHeader{ Title: &amp;#34;MINE&amp;#34;, Section: &amp;#34;3&amp;#34;, } err := doc.GenManTree(cmd, header, &amp;#34;/tmp&amp;#34;) if err != nil { log.Fatal(err) } } That will get you a man page /tmp/test.3</description></item><item><title/><link>https://zulucmd.github.io/zulu/docgen/md/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zulucmd.github.io/zulu/docgen/md/</guid><description>Markdown Docs Generating Markdown pages from a zulu command is incredibly easy. An example is as follows:
package main import ( &amp;#34;log&amp;#34; &amp;#34;github.com/zulucmd/zulu/v2&amp;#34; &amp;#34;github.com/zulucmd/zulu/v2/doc&amp;#34; ) func main() { cmd := &amp;amp;zulu.Command{ Use: &amp;#34;test&amp;#34;, Short: &amp;#34;my test program&amp;#34;, } err := doc.GenMarkdownTree(cmd, &amp;#34;/tmp&amp;#34;) if err != nil { log.Fatal(err) } } That will get you a Markdown document /tmp/test.md
For the entire command tree This program can actually generate docs for the kubectl command in the kubernetes project</description></item><item><title/><link>https://zulucmd.github.io/zulu/docgen/rest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zulucmd.github.io/zulu/docgen/rest/</guid><description>ReStructured Text Docs Generating ReST pages from a zulu command is incredibly easy. An example is as follows:
package main import ( &amp;#34;log&amp;#34; &amp;#34;github.com/zulucmd/zulu/v2&amp;#34; &amp;#34;github.com/zulucmd/zulu/v2/doc&amp;#34; ) func main() { cmd := &amp;amp;zulu.Command{ Use: &amp;#34;test&amp;#34;, Short: &amp;#34;my test program&amp;#34;, } err := doc.GenReSTTree(cmd, &amp;#34;/tmp&amp;#34;) if err != nil { log.Fatal(err) } } That will get you a ReST document /tmp/test.rst
For the entire command tree This program can actually generate docs for the kubectl command in the kubernetes project</description></item><item><title/><link>https://zulucmd.github.io/zulu/docgen/yaml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zulucmd.github.io/zulu/docgen/yaml/</guid><description>Yaml Docs Generating yaml files from a zulu command is incredibly easy. An example is as follows:
package main import ( &amp;#34;log&amp;#34; &amp;#34;github.com/zulucmd/zulu/v2&amp;#34; &amp;#34;github.com/zulucmd/zulu/v2/doc&amp;#34; ) func main() { cmd := &amp;amp;zulu.Command{ Use: &amp;#34;test&amp;#34;, Short: &amp;#34;my test program&amp;#34;, } err := doc.GenYamlTree(cmd, &amp;#34;/tmp&amp;#34;) if err != nil { log.Fatal(err) } } That will get you a Yaml document /tmp/test.yaml
For the entire command tree This program can actually generate docs for the kubectl command in the kubernetes project</description></item><item><title/><link>https://zulucmd.github.io/zulu/docgen/adoc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zulucmd.github.io/zulu/docgen/adoc/</guid><description>AsciiDoc Docs Generating AsciiDoc pages from a zulu command is incredibly easy. An example is as follows:
package main import ( &amp;#34;log&amp;#34; &amp;#34;github.com/zulucmd/zulu/v2&amp;#34; &amp;#34;github.com/zulucmd/zulu/v2/doc&amp;#34; ) func main() { cmd := &amp;amp;zulu.Command{ Use: &amp;#34;test&amp;#34;, Short: &amp;#34;my test program&amp;#34;, } err := doc.GenAsciidocTree(cmd, &amp;#34;/tmp&amp;#34;) if err != nil { log.Fatal(err) } } That will get you a AsciiDoc document /tmp/test.adoc
Generate for the entire command tree This program can actually generate docs for the kubectl command in the kubernetes project</description></item></channel></rss>