<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Zulu documentation</title><link>https://zulucmd.github.io/zulu/</link><description>Recent content on Zulu documentation</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><atom:link href="https://zulucmd.github.io/zulu/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://zulucmd.github.io/zulu/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zulucmd.github.io/zulu/overview/</guid><description>Overview Zulu is a library providing a simple interface to create powerful modern CLI interfaces similar to git &amp;amp; go tools.
Zulu provides:
Easy subcommand-based CLIs: app server, app fetch, etc. Fully POSIX-compliant flags (including short &amp;amp; long versions). Nested subcommands. Global, local and cascading flags. Intelligent suggestions (app srver -&amp;gt; did you mean app server?). Automatic help generation for commands and flags. Automatic help flag recognition of -h, --help, etc.</description></item><item><title/><link>https://zulucmd.github.io/zulu/installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zulucmd.github.io/zulu/installation/</guid><description> Installation Using Zulu is easy. Use go get to install the latest version of the library.
Install the library and its dependencies.
$ go get -u github.com/zulucmd/zulu/v2 go: downloading github.com/zulucmd/zulu/v2 ... Import Zulu in your application.
import &amp;#34;github.com/zulucmd/zulu/v2&amp;#34;</description></item><item><title/><link>https://zulucmd.github.io/zulu/cobra_differences/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zulucmd.github.io/zulu/cobra_differences/</guid><description>Differences with Cobra Zulu is a fork of spf13/cobra. Notable differences between Cobra and Zulu are:
Replaced spf13/pflag with zulucmd/zflag. Zulu has no support for Viper. Viper only works with spf13/pflag, which was forked into zflag, in use by zulu. Instead, you can use koanf-zflag package to utilise knadh/koanf. Removed all the *Run hooks, in favour of *RunE hooks. This just simplifies things and avoids duplicated code. Added hooks for InitializeE and FinalizeE.</description></item><item><title/><link>https://zulucmd.github.io/zulu/concepts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zulucmd.github.io/zulu/concepts/</guid><description>Concepts Zulu is built on a structure of commands, arguments &amp;amp; flags.
Commands represent actions, Args are things, and Flags are modifiers for those actions.
The best applications read like sentences when used, and as a result, users intuitively know how to interact with them.
The pattern to follow is APPNAME VERB NOUN --ADJECTIVE. or APPNAME COMMAND ARG --FLAG
A few good real world examples may better illustrate this point.</description></item><item><title/><link>https://zulucmd.github.io/zulu/getting_started/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zulucmd.github.io/zulu/getting_started/</guid><description>Getting Started While you are welcome organise your application how you see fit, typically a Zulu-based application will follow the following organisational structure:
▾ cmd/ ▾ appName/ add.go your.go commands.go here.go main.go In a Zulu app, typically the main.go file is very bare. It serves one purpose: initializing Zulu. It can optionally include the root zulu.Command definition.
package main func main() { if err := rootCmd.Execute(); err != nil { fmt.</description></item><item><title/><link>https://zulucmd.github.io/zulu/completions/completion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zulucmd.github.io/zulu/completions/completion/</guid><description>Shell completions Zulu can generate shell completions for multiple shells. The currently supported shells are:
Bash Zsh fish PowerShell Zulu will automatically provide your program with a fully functional completion sub-command, similarly to how it provides the help command.
Zulu&amp;rsquo;s completion scripts provide the following features:
Supports completion descriptions (like the other shells). Small completion script of less than 300 lines. Streamlined user experience thanks to a completion behavior aligned with the other shells.</description></item><item><title/><link>https://zulucmd.github.io/zulu/completions/bash/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zulucmd.github.io/zulu/completions/bash/</guid><description>Bash Bash completion can be used by calling command.GenBashCompletion() or command.GenBashCompletionFile(). It supports descriptions for completions. When calling the functions you must provide it with a parameter indicating if the completions should be annotated with a description; Zulu will provide the description automatically based on usage information. You can choose to make this option configurable by your users.
# With descriptions $ helm s[tab][tab] search (search for a keyword in charts) status (display the status of the named release) show (show information of a chart) # Without descriptions $ helm s[tab][tab] search show status Dependencies The bash completion script generated by Zulu requires the bash_completion package.</description></item><item><title/><link>https://zulucmd.github.io/zulu/completions/zsh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zulucmd.github.io/zulu/completions/zsh/</guid><description>Zsh Zsh completion can be used by calling command.GenZshCompletion() or command.GenZshCompletionFile(). It supports descriptions for completions. When calling the functions you must provide it with a parameter indicating if the completions should be annotated with a description; Zulu will provide the description automatically based on usage information. You can choose to make this option configurable by your users.
The generated completion script should be put somewhere in your $fpath and be named _&amp;lt;yourProgram&amp;gt;.</description></item><item><title/><link>https://zulucmd.github.io/zulu/completions/fish/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zulucmd.github.io/zulu/completions/fish/</guid><description>Fish Fish completion can be used by calling command.GenFishCompletion() or command.GenFishCompletionFile(). It supports descriptions for completions. When calling the functions you must provide it with a parameter indicating if the completions should be annotated with a description; Zulu will provide the description automatically based on usage information. You can choose to make this option configurable by your users.
# With descriptions $ helm s[tab] search (search for a keyword in charts) show (show information of a chart) status (displays the status of the named release) # Without descriptions $ helm s[tab] search show status Note: Because of backward-compatibility requirements, we were forced to have a different API to disable completion descriptions between zsh and fish.</description></item><item><title/><link>https://zulucmd.github.io/zulu/completions/powershell/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zulucmd.github.io/zulu/completions/powershell/</guid><description>PowerShell PowerShell completion can be used by calling the command.GenPowerShellCompletion() or command.GenPowerShellCompletionFile() functions. It supports descriptions for completions. When calling the functions you must provide it with a parameter indicating if the completions should be annotated with a description; Zulu will provide the description automatically based on usage information. You can choose to make this option configurable by your users.
The script is designed to support all three PowerShell completion modes:</description></item><item><title/><link>https://zulucmd.github.io/zulu/docgen/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zulucmd.github.io/zulu/docgen/docs/</guid><description> Documentation generation Zulu supports generating different types of documentation. This section explain how to generate man pages, markdown, and others.
Options DisableAutoGenTag. You may set cmd.DisableAutoGenTag = true to entirely remove the auto generated string &amp;ldquo;Auto generated by zulucmd/zulu&amp;hellip;&amp;rdquo; from any documentation source.</description></item><item><title/><link>https://zulucmd.github.io/zulu/docgen/man/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zulucmd.github.io/zulu/docgen/man/</guid><description>Man Pages Generating man pages from a zulu command is incredibly easy. An example is as follows:
package main import ( &amp;#34;log&amp;#34; &amp;#34;github.com/zulucmd/zulu/v2&amp;#34; &amp;#34;github.com/zulucmd/zulu/v2/doc&amp;#34; ) func main() { cmd := &amp;amp;zulu.Command{ Use: &amp;#34;test&amp;#34;, Short: &amp;#34;my test program&amp;#34;, } header := &amp;amp;doc.GenManHeader{ Title: &amp;#34;MINE&amp;#34;, Section: &amp;#34;3&amp;#34;, } err := doc.GenManTree(cmd, header, &amp;#34;/tmp&amp;#34;) if err != nil { log.Fatal(err) } } That will get you a man page /tmp/test.3</description></item><item><title/><link>https://zulucmd.github.io/zulu/docgen/md/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zulucmd.github.io/zulu/docgen/md/</guid><description>Markdown Docs Generating Markdown pages from a zulu command is incredibly easy. An example is as follows:
package main import ( &amp;#34;log&amp;#34; &amp;#34;github.com/zulucmd/zulu/v2&amp;#34; &amp;#34;github.com/zulucmd/zulu/v2/doc&amp;#34; ) func main() { cmd := &amp;amp;zulu.Command{ Use: &amp;#34;test&amp;#34;, Short: &amp;#34;my test program&amp;#34;, } err := doc.GenMarkdownTree(cmd, &amp;#34;/tmp&amp;#34;) if err != nil { log.Fatal(err) } } That will get you a Markdown document /tmp/test.md
For the entire command tree This program can actually generate docs for the kubectl command in the kubernetes project</description></item><item><title/><link>https://zulucmd.github.io/zulu/docgen/rest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zulucmd.github.io/zulu/docgen/rest/</guid><description>ReStructured Text Docs Generating ReST pages from a zulu command is incredibly easy. An example is as follows:
package main import ( &amp;#34;log&amp;#34; &amp;#34;github.com/zulucmd/zulu/v2&amp;#34; &amp;#34;github.com/zulucmd/zulu/v2/doc&amp;#34; ) func main() { cmd := &amp;amp;zulu.Command{ Use: &amp;#34;test&amp;#34;, Short: &amp;#34;my test program&amp;#34;, } err := doc.GenReSTTree(cmd, &amp;#34;/tmp&amp;#34;) if err != nil { log.Fatal(err) } } That will get you a ReST document /tmp/test.rst
For the entire command tree This program can actually generate docs for the kubectl command in the kubernetes project</description></item><item><title/><link>https://zulucmd.github.io/zulu/docgen/yaml/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zulucmd.github.io/zulu/docgen/yaml/</guid><description>Yaml Docs Generating yaml files from a zulu command is incredibly easy. An example is as follows:
package main import ( &amp;#34;log&amp;#34; &amp;#34;github.com/zulucmd/zulu/v2&amp;#34; &amp;#34;github.com/zulucmd/zulu/v2/doc&amp;#34; ) func main() { cmd := &amp;amp;zulu.Command{ Use: &amp;#34;test&amp;#34;, Short: &amp;#34;my test program&amp;#34;, } err := doc.GenYamlTree(cmd, &amp;#34;/tmp&amp;#34;) if err != nil { log.Fatal(err) } } That will get you a Yaml document /tmp/test.yaml
For the entire command tree This program can actually generate docs for the kubectl command in the kubernetes project</description></item><item><title/><link>https://zulucmd.github.io/zulu/docgen/adoc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zulucmd.github.io/zulu/docgen/adoc/</guid><description>AsciiDoc Docs Generating AsciiDoc pages from a zulu command is incredibly easy. An example is as follows:
package main import ( &amp;#34;log&amp;#34; &amp;#34;github.com/zulucmd/zulu/v2&amp;#34; &amp;#34;github.com/zulucmd/zulu/v2/doc&amp;#34; ) func main() { cmd := &amp;amp;zulu.Command{ Use: &amp;#34;test&amp;#34;, Short: &amp;#34;my test program&amp;#34;, } err := doc.GenAsciidocTree(cmd, &amp;#34;/tmp&amp;#34;) if err != nil { log.Fatal(err) } } That will get you a AsciiDoc document /tmp/test.adoc
Generate for the entire command tree This program can actually generate docs for the kubectl command in the kubernetes project</description></item><item><title/><link>https://zulucmd.github.io/zulu/contributing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zulucmd.github.io/zulu/contributing/</guid><description>Contributing to Zulu Thank you so much for contributing to Zulu. We appreciate your time and help. Here are some guidelines to help you get started.
Code of Conduct Be kind and respectful to the members of the community. Take time to educate others who are seeking help. Harassment of any kind will not be tolerated.
Questions If you have questions regarding Zulu, feel free to raise a ticket to ask a question.</description></item><item><title/><link>https://zulucmd.github.io/zulu/changelog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zulucmd.github.io/zulu/changelog/</guid><description>Changelog No releases yet.</description></item><item><title/><link>https://zulucmd.github.io/zulu/conduct/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zulucmd.github.io/zulu/conduct/</guid><description>Conduct Versioning Zulu will follow a steady release cadence. Non-breaking changes will be released as minor versions quarterly. Patch bug releases are at the discretion of the maintainers. Users can expect security patch fixes to be released within relatively short order of a CVE becoming known. For more information on security patch fixes see the CVE section below. Releases will follow Semantic Versioning. Users tracking the Master branch should expect unpredictable breaking changes as the project continues to move forward.</description></item><item><title/><link>https://zulucmd.github.io/zulu/license/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://zulucmd.github.io/zulu/license/</guid><description>License Zulu is released under the Apache 2.0 license. See LICENSE.txt</description></item></channel></rss>