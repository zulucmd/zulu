# -*- shell-script -*-
# bash completion for {{ .CMDName }}

__{{ .CMDVarName }}_debug() {
  if [[ -n ${BASH_COMP_DEBUG_FILE-} ]]; then
    echo "$*" >>"${BASH_COMP_DEBUG_FILE}"
  fi
}

# Macs have bash3 for which the bash-completion package doesn't include
# _init_completion. This is a minimal version of that function.
__{{ .CMDVarName }}_init_completion() {
  COMPREPLY=()
  _get_comp_words_by_ref "$@" cur prev words cword
}

# This function calls the {{ .CMDName }} program to obtain the completion
# results and the directive.  It fills the 'out' and 'directive' vars.
__{{ .CMDVarName }}_get_completion_results() {
  local requestComp lastParam lastChar args

  # Prepare the command to request completions for the program.
  # Calling ${words[0]} instead of directly {{ .CMDName }} allows to handle aliases
  printf -v args " %s" "${words[@]:1}"
  requestComp="${words[0]} {{ .CompletionCommand }}${args}"

  lastParam=${words[$((${#words[@]} - 1))]}
  lastChar=${lastParam:$((${#lastParam} - 1)):1}
  __{{ .CMDVarName }}_debug "lastParam ${lastParam}, lastChar ${lastChar}"

  if [[ -z ${cur} && ${lastChar} != = ]]; then
    # If the last parameter is complete (there is a space following it)
    # We add an extra empty parameter so we can indicate this to the go method.
    __{{ .CMDVarName }}_debug "Adding extra empty parameter"
    requestComp="${requestComp} ''"
  fi

  # When completing a flag with an = (e.g., {{ .CMDName }} -n=<TAB>)
  # bash focuses on the part after the =, so we need to remove
  # the flag part from $cur
  if [[ ${cur} == -*=* ]]; then
    cur="${cur#*=}"
  fi

  __{{ .CMDVarName }}_debug "Calling ${requestComp}"
  # Use eval to handle any environment variables and such
  out=$(eval "${requestComp}" 2>/dev/null)

  # Extract the directive integer at the very end of the output following a colon (:)
  directive=${out##*:}
  # Remove the directive
  out=${out%:*}
  if [[ ${directive} == "${out}" ]]; then
    # There is not directive specified
    directive=0
  fi
  __{{ .CMDVarName }}_debug "The completion directive is: ${directive}"
  __{{ .CMDVarName }}_debug "The completions are: ${out}"
}

__{{ .CMDVarName }}_process_completion_results() {
  local shellCompDirectiveError={{ .ShellCompDirectiveError }}
  local shellCompDirectiveNoSpace={{ .ShellCompDirectiveNoSpace }}
  local shellCompDirectiveNoFileComp={{ .ShellCompDirectiveNoFileComp }}
  local shellCompDirectiveFilterFileExt={{ .ShellCompDirectiveFilterFileExt }}
  local shellCompDirectiveFilterDirs={{ .ShellCompDirectiveFilterDirs }}
  local shellCompDirectiveKeepOrder={{ .ShellCompDirectiveKeepOrder }}

  if (((directive & shellCompDirectiveError) != 0)); then
    # Error code.  No completion.
    __{{ .CMDVarName }}_debug "Received error from custom completion go code"
    return
  else
    if (((directive & shellCompDirectiveNoSpace) != 0)); then
      if [[ $(type -t compopt) == builtin ]]; then
        __{{ .CMDVarName }}_debug "Activating no space"
        compopt -o nospace
      else
        __{{ .CMDVarName }}_debug "No space directive not supported in this version of bash"
      fi
    fi
    if (((directive & shellCompDirectiveKeepOrder) != 0)); then
      if [[ $(type -t compopt) == builtin ]]; then
        # no sort isn't supported for bash less than < 4.4
        if ((BASH_VERSINFO[0] < 4 || (BASH_VERSINFO[0] == 4 && BASH_VERSINFO[1] < 4))); then
          __{{ .CMDVarName }}_debug "No sort directive not supported in this version of bash"
        else
          __{{ .CMDVarName }}_debug "Activating keep order"
          compopt -o nosort
        fi
      else
        __{{ .CMDVarName }}_debug "No sort directive not supported in this version of bash"
      fi
    fi
    if (((directive & shellCompDirectiveNoFileComp) != 0)); then
      if [[ $(type -t compopt) == builtin ]]; then
        __{{ .CMDVarName }}_debug "Activating no file completion"
        compopt +o default
      else
        __{{ .CMDVarName }}_debug "No file completion directive not supported in this version of bash"
      fi
    fi
  fi

  if (((directive & shellCompDirectiveFilterFileExt) != 0)); then
    # File extension filtering
    local fullFilter filter filteringCmd

    # Do not use quotes around the $out variable or else newline
    # characters will be kept.
    for filter in ${out}; do
      fullFilter+="$filter|"
    done

    filteringCmd="_filedir $fullFilter"
    __{{ .CMDVarName }}_debug "File filtering command: $filteringCmd"
    $filteringCmd
  elif (((directive & shellCompDirectiveFilterDirs) != 0)); then
    # File completion for directories only

    local subdir
    subdir=${out%%$'\n'*}
    if [[ -n $subdir ]]; then
      __{{ .CMDVarName }}_debug "Listing directories in $subdir"
      pushd "$subdir" >/dev/null 2>&1 && _filedir -d && popd >/dev/null 2>&1 || return
    else
      __{{ .CMDVarName }}_debug "Listing directories in ."
      _filedir -d
    fi
  else
    __{{ .CMDVarName }}_handle_completion_types
  fi

  __{{ .CMDVarName }}_handle_special_char "$cur" :
  __{{ .CMDVarName }}_handle_special_char "$cur" =
}

__{{ .CMDVarName }}_handle_completion_types() {
  __{{ .CMDVarName }}_debug "__{{ .CMDVarName }}_handle_completion_types: COMP_TYPE is $COMP_TYPE"

  case $COMP_TYPE in
  37 | 42)
    # Type: menu-complete/menu-complete-backward and insert-completions
    # If the user requested inserting one completion at a time, or all
    # completions at once on the command-line we must remove the descriptions.
    # https://github.com/spf13/cobra/issues/1508
    local tab=$'\t' comp
    while IFS='' read -r comp; do
      [[ -z $comp ]] && continue
      # Strip any description
      comp=${comp%%"$tab"*}
      # Only consider the completions that match
      if [[ $comp == "$cur"* ]]; then
        COMPREPLY+=("$comp")
      fi
    done <<<"${out}"
    ;;

  *)
    # Type: complete (normal completion)
    __{{ .CMDVarName }}_handle_standard_completion_case
    ;;
  esac
}

__{{ .CMDVarName }}_handle_standard_completion_case() {
  local tab=$'\t' comp

  # Short circuit to optimize if we don't have descriptions
  if [[ $out != *$tab* ]]; then
    IFS=$'\n' read -ra COMPREPLY -d '' < <(IFS=$'\n' compgen -W "$out" -- "$cur")
    return 0
  fi

  local longest=0
  local compline
  # Look for the longest completion so that we can format things nicely
  while IFS='' read -r compline; do
    [[ -z $compline ]] && continue
    # Strip any description before checking the length
    comp=${compline%%"$tab"*}
    # Only consider the completions that match
    [[ $comp == "$cur"* ]] || continue
    COMPREPLY+=("$compline")
    if ((${#comp} > longest)); then
      longest=${#comp}
    fi
  done <<<"${out}"

  # If there is a single completion left, remove the description text
  if ((${#COMPREPLY[*]} == 1)); then
    __{{ .CMDVarName }}_debug "COMPREPLY[0]: ${COMPREPLY[0]}"
    comp="${COMPREPLY[0]%%$tab*}"
    __{{ .CMDVarName }}_debug "Removed description from single completion, which is now: ${comp}"
    COMPREPLY[0]=$comp
  else # Format the descriptions
    __{{ .CMDVarName }}_format_comp_descriptions "$longest"
  fi
}

__{{ .CMDVarName }}_handle_special_char() {
  local comp="$1"
  local char=$2
  if [[ "$comp" == *${char}* && "$COMP_WORDBREAKS" == *${char}* ]]; then
    local word=${comp%"${comp##*"$char"}"}
    local idx=${#COMPREPLY[*]}
    while ((--idx >= 0)); do
      COMPREPLY[idx]=${COMPREPLY[idx]#"$word"}
    done
  fi
}

__{{ .CMDVarName }}_format_comp_descriptions() {
  local tab=$'\t'
  local comp desc max_desc_length
  local longest=$1

  local i ci
  for ci in ${!COMPREPLY[*]}; do
    comp=${COMPREPLY[ci]}
    # Properly format the description string which follows a tab character if there is one
    if [[ "$comp" == *$tab* ]]; then
      __{{ .CMDVarName }}_debug "Original comp: $comp"
      desc=${comp#*"$tab"}
      comp=${comp%%"$tab"*}

      # $COLUMNS stores the current shell width.
      # Remove an extra 4 because we add 2 spaces and 2 parentheses.
      max_desc_length=$((COLUMNS - longest - 4))

      # Make sure we can fit a description of at least 8 characters
      # if we are to align the descriptions.
      if ((max_desc_length > 8)); then
        # Add the proper number of spaces to align the descriptions
        for ((i = ${#comp}; i < longest; i++)); do
          comp+=" "
        done
      else
        # Don't pad the descriptions, so we can fit more text after the completion
        max_desc_length=$((COLUMNS - ${#comp} - 4))
      fi

      # If there is enough space for any description text,
      # truncate the descriptions that are too long for the shell width
      if ((max_desc_length > 0)); then
        if ((${#desc} > max_desc_length)); then
          desc=${desc:0:$((max_desc_length - 1))}
          desc+="â€¦"
        fi
        comp+="  ($desc)"
      fi
      COMPREPLY[ci]=$comp
      __{{ .CMDVarName }}_debug "Final comp: $comp"
    fi
  done
}

__start_{{ .CMDVarName }}() {
  local cur words cword

  COMPREPLY=()

  # Call _init_completion from the bash-completion package
  # to prepare the arguments properly
  if declare -F _init_completion >/dev/null 2>&1; then
    _init_completion -n =: || return
  else
    __{{ .CMDVarName }}_init_completion -n =: || return
  fi

  __{{ .CMDVarName }}_debug "========= starting completion logic =========="
  __{{ .CMDVarName }}_debug "cur is ${cur}, words[*] is ${words[*]}, #words[@] is ${#words[@]}, cword is $cword"

  # The user could have moved the cursor backwards on the command-line.
  # We need to trigger completion from the $cword location, so we need
  # to truncate the command-line ($words) up to the $cword location.
  words=("${words[@]:0:$cword+1}")
  __{{ .CMDVarName }}_debug "Truncated words[*]: ${words[*]},"

  local out directive
  __{{ .CMDVarName }}_get_completion_results
  __{{ .CMDVarName }}_process_completion_results
}

if [[ $(type -t compopt) = "builtin" ]]; then
  complete -o default -F __start_{{ .CMDVarName }} {{ .CMDName }}
else
  complete -o default -o nospace -F __start_{{ .CMDVarName }} {{ .CMDName }}
fi

# ex: ts=4 sw=4 et filetype=sh
