// Code generated by "enumer -type=ShellCompDirective -output shell_completions.gen.go ./"; DO NOT EDIT.

package zulu

import (
	"fmt"
	"strings"
)

const (
	_ShellCompDirectiveName_0      = "ShellCompDirectiveDefaultShellCompDirectiveErrorShellCompDirectiveNoSpace"
	_ShellCompDirectiveLowerName_0 = "shellcompdirectivedefaultshellcompdirectiveerrorshellcompdirectivenospace"
	_ShellCompDirectiveName_1      = "ShellCompDirectiveNoFileComp"
	_ShellCompDirectiveLowerName_1 = "shellcompdirectivenofilecomp"
	_ShellCompDirectiveName_2      = "ShellCompDirectiveFilterFileExt"
	_ShellCompDirectiveLowerName_2 = "shellcompdirectivefilterfileext"
	_ShellCompDirectiveName_3      = "ShellCompDirectiveFilterDirs"
	_ShellCompDirectiveLowerName_3 = "shellcompdirectivefilterdirs"
	_ShellCompDirectiveName_4      = "ShellCompDirectiveKeepOrder"
	_ShellCompDirectiveLowerName_4 = "shellcompdirectivekeeporder"
	_ShellCompDirectiveName_5      = "shellCompDirectiveMaxValue"
	_ShellCompDirectiveLowerName_5 = "shellcompdirectivemaxvalue"
)

var (
	_ShellCompDirectiveIndex_0 = [...]uint8{0, 25, 48, 73}
	_ShellCompDirectiveIndex_1 = [...]uint8{0, 28}
	_ShellCompDirectiveIndex_2 = [...]uint8{0, 31}
	_ShellCompDirectiveIndex_3 = [...]uint8{0, 28}
	_ShellCompDirectiveIndex_4 = [...]uint8{0, 27}
	_ShellCompDirectiveIndex_5 = [...]uint8{0, 26}
)

func (i ShellCompDirective) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _ShellCompDirectiveName_0[_ShellCompDirectiveIndex_0[i]:_ShellCompDirectiveIndex_0[i+1]]
	case i == 4:
		return _ShellCompDirectiveName_1
	case i == 8:
		return _ShellCompDirectiveName_2
	case i == 16:
		return _ShellCompDirectiveName_3
	case i == 32:
		return _ShellCompDirectiveName_4
	case i == 64:
		return _ShellCompDirectiveName_5
	default:
		return fmt.Sprintf("ShellCompDirective(%d)", i)
	}
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ShellCompDirectiveNoOp() {
	var x [1]struct{}
	_ = x[ShellCompDirectiveDefault-(0)]
	_ = x[ShellCompDirectiveError-(1)]
	_ = x[ShellCompDirectiveNoSpace-(2)]
	_ = x[ShellCompDirectiveNoFileComp-(4)]
	_ = x[ShellCompDirectiveFilterFileExt-(8)]
	_ = x[ShellCompDirectiveFilterDirs-(16)]
	_ = x[ShellCompDirectiveKeepOrder-(32)]
	_ = x[shellCompDirectiveMaxValue-(64)]
}

var _ShellCompDirectiveValues = []ShellCompDirective{ShellCompDirectiveDefault, ShellCompDirectiveError, ShellCompDirectiveNoSpace, ShellCompDirectiveNoFileComp, ShellCompDirectiveFilterFileExt, ShellCompDirectiveFilterDirs, ShellCompDirectiveKeepOrder, shellCompDirectiveMaxValue}

var _ShellCompDirectiveNameToValueMap = map[string]ShellCompDirective{
	_ShellCompDirectiveName_0[0:25]:       ShellCompDirectiveDefault,
	_ShellCompDirectiveLowerName_0[0:25]:  ShellCompDirectiveDefault,
	_ShellCompDirectiveName_0[25:48]:      ShellCompDirectiveError,
	_ShellCompDirectiveLowerName_0[25:48]: ShellCompDirectiveError,
	_ShellCompDirectiveName_0[48:73]:      ShellCompDirectiveNoSpace,
	_ShellCompDirectiveLowerName_0[48:73]: ShellCompDirectiveNoSpace,
	_ShellCompDirectiveName_1[0:28]:       ShellCompDirectiveNoFileComp,
	_ShellCompDirectiveLowerName_1[0:28]:  ShellCompDirectiveNoFileComp,
	_ShellCompDirectiveName_2[0:31]:       ShellCompDirectiveFilterFileExt,
	_ShellCompDirectiveLowerName_2[0:31]:  ShellCompDirectiveFilterFileExt,
	_ShellCompDirectiveName_3[0:28]:       ShellCompDirectiveFilterDirs,
	_ShellCompDirectiveLowerName_3[0:28]:  ShellCompDirectiveFilterDirs,
	_ShellCompDirectiveName_4[0:27]:       ShellCompDirectiveKeepOrder,
	_ShellCompDirectiveLowerName_4[0:27]:  ShellCompDirectiveKeepOrder,
	_ShellCompDirectiveName_5[0:26]:       shellCompDirectiveMaxValue,
	_ShellCompDirectiveLowerName_5[0:26]:  shellCompDirectiveMaxValue,
}

var _ShellCompDirectiveNames = []string{
	_ShellCompDirectiveName_0[0:25],
	_ShellCompDirectiveName_0[25:48],
	_ShellCompDirectiveName_0[48:73],
	_ShellCompDirectiveName_1[0:28],
	_ShellCompDirectiveName_2[0:31],
	_ShellCompDirectiveName_3[0:28],
	_ShellCompDirectiveName_4[0:27],
	_ShellCompDirectiveName_5[0:26],
}

// ShellCompDirectiveString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ShellCompDirectiveString(s string) (ShellCompDirective, error) {
	if val, ok := _ShellCompDirectiveNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ShellCompDirectiveNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ShellCompDirective values", s)
}

// ShellCompDirectiveValues returns all values of the enum
func ShellCompDirectiveValues() []ShellCompDirective {
	return _ShellCompDirectiveValues
}

// ShellCompDirectiveStrings returns a slice of all String values of the enum
func ShellCompDirectiveStrings() []string {
	strs := make([]string, len(_ShellCompDirectiveNames))
	copy(strs, _ShellCompDirectiveNames)
	return strs
}

// IsAShellCompDirective returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ShellCompDirective) IsAShellCompDirective() bool {
	for _, v := range _ShellCompDirectiveValues {
		if i == v {
			return true
		}
	}
	return false
}
