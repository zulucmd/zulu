// Code generated by "enumer -type=ShellCompDirective -output ./shell_comp_directive.gen.go -format -template=./gen_templates/stringer.go.gotmpl ./"; DO NOT EDIT.

package zulu

import (
	"fmt"
)

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the enumer command to generate them again.
func _ShellCompDirectiveNoOp() {
	var x [1]struct{}
	_ = x[ShellCompDirectiveError-(1)]
	_ = x[ShellCompDirectiveNoSpace-(2)]
	_ = x[ShellCompDirectiveNoFileComp-(4)]
	_ = x[ShellCompDirectiveFilterFileExt-(8)]
	_ = x[ShellCompDirectiveFilterDirs-(16)]
	_ = x[ShellCompDirectiveKeepOrder-(32)]
	_ = x[shellCompDirectiveMaxValue-(64)]
	_ = x[ShellCompDirectiveDefault-(0)]
}

var _ShellCompDirectiveValues = []ShellCompDirective{
	ShellCompDirectiveError,
	ShellCompDirectiveNoSpace,
	ShellCompDirectiveNoFileComp,
	ShellCompDirectiveFilterFileExt,
	ShellCompDirectiveFilterDirs,
	ShellCompDirectiveKeepOrder,
	ShellCompDirectiveDefault,
}

// ShellCompDirectiveValues returns all values of the enum
func ShellCompDirectiveValues() []ShellCompDirective {
	return _ShellCompDirectiveValues
}

// IsAShellCompDirective returns "true" if the value is listed in the enum definition, "false" otherwise.
func (i ShellCompDirective) IsAShellCompDirective() bool {
	for _, v := range _ShellCompDirectiveValues {
		if i == v {
			return true
		}
	}
	return false
}

func (i ShellCompDirective) Name() string {
	switch i {
	case ShellCompDirectiveError:
		return "ShellCompDirectiveError"
	case ShellCompDirectiveNoSpace:
		return "ShellCompDirectiveNoSpace"
	case ShellCompDirectiveNoFileComp:
		return "ShellCompDirectiveNoFileComp"
	case ShellCompDirectiveFilterFileExt:
		return "ShellCompDirectiveFilterFileExt"
	case ShellCompDirectiveFilterDirs:
		return "ShellCompDirectiveFilterDirs"
	case ShellCompDirectiveKeepOrder:
		return "ShellCompDirectiveKeepOrder"
	case ShellCompDirectiveDefault:
		return "ShellCompDirectiveDefault"
	default:
		return fmt.Sprintf("ShellCompDirective(%d)", i)
	}
}
