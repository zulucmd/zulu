// Code generated by "enumer {{ .args }}"; DO NOT EDIT.

package {{ .pkgName }}

import (
	"fmt"
)

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the enumer command to generate them again.
func _{{ .typeName }}NoOp() {
	var x [1]struct{}
	{{- range $val := .values }}
	_ = x[{{ $val.Name }}-({{ $val }})]
	{{- end }}
}

var _{{ .typeName }}Values = []{{ .typeName }}{
{{- range $val := .values }}
{{- if $val.Exported }}
	{{ $val.Name }},
{{- end }}
{{- end }}
}

// {{ .typeName }}Values returns all values of the enum
func {{ .typeName }}Values() []{{ .typeName }} {
	return _{{ .typeName }}Values
}

// IsA{{ .typeName }} returns "true" if the value is listed in the enum definition, "false" otherwise.
func (i {{ .typeName }}) IsA{{ .typeName }}() bool {
	for _, v := range _{{ .typeName }}Values {
		if i == v {
			return true
		}
	}
	return false
}

func (i {{ .typeName }}) Name() string {
	switch i {
{{- range $val := .values }}
{{- if $val.Exported }}
	case {{ $val.Name }}:
		return "{{ $val.Name }}"
{{- end }}
{{- end }}
	default:
		return fmt.Sprintf("{{ .typeName }}(%d)", i)
	}
}
